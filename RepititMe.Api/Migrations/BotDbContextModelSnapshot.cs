// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RepititMe.Infrastructure;

#nullable disable

namespace RepititMe.Api.Migrations
{
    [DbContext(typeof(BotDbContext))]
    partial class BotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.AgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Дошкольники: 4-7 лет"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Начальные классы: 1-4 класс"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Средние классы: 5-8 класс"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Старшие классы: 9-11 класс"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Студенты"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Взрослые"
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.LessonTarget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LessonTargets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ОГЭ по математике"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ЕГЭ по математике (базовый уровень)"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ЕГЭ по математике (профильный уровень)"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Подготовка к олимпиаде по математике"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ДВИ по математике"
                        },
                        new
                        {
                            Id = 6,
                            Name = "ВПР по математике"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Подготовка к экзамену в вузе"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Повышение успеваемости"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Для себя"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Подготовка к олимпиаде по английскому языку"
                        },
                        new
                        {
                            Id = 11,
                            Name = "ОГЭ по английскому языку"
                        },
                        new
                        {
                            Id = 12,
                            Name = "ЕГЭ по английскому языку"
                        },
                        new
                        {
                            Id = 13,
                            Name = "ДВИ по английскому языку"
                        },
                        new
                        {
                            Id = 14,
                            Name = "ВПР по английскому языку"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Подготовка к олимпиаде по истории"
                        },
                        new
                        {
                            Id = 16,
                            Name = "ОГЭ по истории"
                        },
                        new
                        {
                            Id = 17,
                            Name = "ЕГЭ по истории"
                        },
                        new
                        {
                            Id = 18,
                            Name = "ДВИ по истории"
                        },
                        new
                        {
                            Id = 19,
                            Name = "ВПР по истории"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Подготовка к олимпиаде по информатике"
                        },
                        new
                        {
                            Id = 21,
                            Name = "ОГЭ по информатике"
                        },
                        new
                        {
                            Id = 22,
                            Name = "ЕГЭ по информатике"
                        },
                        new
                        {
                            Id = 23,
                            Name = "ДВИ по информатике"
                        },
                        new
                        {
                            Id = 24,
                            Name = "ВПР по информатике"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Подготовка к олимпиаде по русскому языку"
                        },
                        new
                        {
                            Id = 26,
                            Name = "ОГЭ по русскому языку"
                        },
                        new
                        {
                            Id = 27,
                            Name = "ЕГЭ по русскому языку"
                        },
                        new
                        {
                            Id = 28,
                            Name = "ДВИ по русскому языку"
                        },
                        new
                        {
                            Id = 29,
                            Name = "ВПР по русскому языку"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Подготовка к олимпиаде по физике"
                        },
                        new
                        {
                            Id = 31,
                            Name = "ОГЭ по физике"
                        },
                        new
                        {
                            Id = 32,
                            Name = "ЕГЭ по физике"
                        },
                        new
                        {
                            Id = 33,
                            Name = "ДВИ по физике"
                        },
                        new
                        {
                            Id = 34,
                            Name = "ВПР по физике"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Подготовка к олимпиаде по химии"
                        },
                        new
                        {
                            Id = 36,
                            Name = "ОГЭ по химии"
                        },
                        new
                        {
                            Id = 37,
                            Name = "ЕГЭ по химии"
                        },
                        new
                        {
                            Id = 38,
                            Name = "ДВИ по химии"
                        },
                        new
                        {
                            Id = 39,
                            Name = "ВПР по химии"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Подготовка к олимпиаде по биологии"
                        },
                        new
                        {
                            Id = 41,
                            Name = "ОГЭ по биологии"
                        },
                        new
                        {
                            Id = 42,
                            Name = "ЕГЭ по биологии"
                        },
                        new
                        {
                            Id = 43,
                            Name = "ДВИ по биологии"
                        },
                        new
                        {
                            Id = 44,
                            Name = "ВПР по биологии"
                        },
                        new
                        {
                            Id = 45,
                            Name = "Подготовка к олимпиаде по обществознанию"
                        },
                        new
                        {
                            Id = 46,
                            Name = "ОГЭ по обществознанию"
                        },
                        new
                        {
                            Id = 47,
                            Name = "ЕГЭ по обществознанию"
                        },
                        new
                        {
                            Id = 48,
                            Name = "ДВИ по обществознанию"
                        },
                        new
                        {
                            Id = 49,
                            Name = "ВПР по обществознанию"
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.PaymentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Value")
                        .HasColumnType("double precision");

                    b.Property<bool>("WaitingPayment")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PaymentStatuses");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.Science", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sciences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Математика"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Английский язык"
                        },
                        new
                        {
                            Id = 3,
                            Name = "История"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Информатика"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Русский язык"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Физика"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Химия"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Биология"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Обществознание"
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.StudentUseFulUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StudentUseFulUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/representations-user-experience-interface-design_23-2150104504.jpg?w=1380&t=st=1699363487~exp=1699364087~hmac=a9b760c1990278d66e9109276b979b59e76c80ca595013e73eba0940c56d26cc",
                            Text = "Как пользоваться сервисом? ",
                            Url = "https://teletype.in/@repetitme/about_us"
                        },
                        new
                        {
                            Id = 2,
                            ColorText = "#000000",
                            Image = "https://img.freepik.com/free-photo/golden-correct-sign-best-quality-assurance-guarantee-product-iso-service-concept_616485-97.jpg?w=1380&t=st=1699363513~exp=1699364113~hmac=ecaf72d45234a4bb1219570234da5ceabf78e3bf10a97af84e00afb49fcd5ae5",
                            Text = "Преимущества сервиса для клиентов",
                            Url = "https://teletype.in/@repetitme/adv_for_students"
                        },
                        new
                        {
                            Id = 3,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/beautiful-rendering-dating-app-concept_23-2149316416.jpg?w=1060&t=st=1699363774~exp=1699364374~hmac=e63b5200fc721a3e448eba417175666be7775c2c0f33da70ee967308a2d0240d",
                            Text = "Способы подобрать репетитора",
                            Url = "https://teletype.in/@repetitme/ways_to_find_tutors"
                        },
                        new
                        {
                            Id = 4,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/comment-message-inbox-shape-social-media-notification-icon-speech-bubbles-3d-cartoon-banner-website-ui-pink-background-3d-rendering-illustration_56104-1328.jpg?w=996&t=st=1699363791~exp=1699364391~hmac=70384b0d70615256dca861d55637a99b8eeac5a381ef02c0e7768b8de466552e",
                            Text = "Обратная связь от ученика",
                            Url = "https://teletype.in/@repetitme/feedback_students"
                        },
                        new
                        {
                            Id = 5,
                            ColorText = "#000000",
                            Image = "https://img.freepik.com/free-photo/3d-render-customer-leave-feedback-phone-screen_107791-17460.jpg?w=826&t=st=1699363813~exp=1699364413~hmac=676797ff3134036292b7b0678a890743998fe3ede313c132a1e5fcbd935c6b06",
                            Text = "Как проводить онлайн-занятия?",
                            Url = "https://teletype.in/@repetitme/online_lessons"
                        },
                        new
                        {
                            Id = 6,
                            ColorText = "#000000",
                            Image = "https://img.freepik.com/free-photo/3d-render-online-education-survey-test-concept_107791-15665.jpg?w=1800&t=st=1699363835~exp=1699364435~hmac=1dcdc60cb6f2e8d2e2362d1ff8101f78c0e7f41f79308f22fb2fc3d7185c7986",
                            Text = "Как оставить отзыв о репетиторе",
                            Url = "https://teletype.in/@repetitme/review"
                        },
                        new
                        {
                            Id = 7,
                            ColorText = "#000000",
                            Image = "https://img.freepik.com/free-psd/question-mark-confirmed-signs-false-rejection-icon-3d-render-isolated_47987-11659.jpg?w=1060&t=st=1699363851~exp=1699364451~hmac=f1f533e4f73684627235426e2fbc4992512f9f71b2be48ef10a6adc8a5c1bdcc",
                            Text = "FAQ– вопросы учеников",
                            Url = "https://teletype.in/@repetitme/faq_students"
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.TeacherAgeCategory", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("AgeCategoryId")
                        .HasColumnType("integer");

                    b.HasKey("TeacherId", "AgeCategoryId");

                    b.HasIndex("AgeCategoryId");

                    b.ToTable("TeacherAgeCategorys");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.TeacherLessonTarget", b =>
                {
                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonTargetId")
                        .HasColumnType("integer");

                    b.HasKey("TeacherId", "LessonTargetId");

                    b.HasIndex("LessonTargetId");

                    b.ToTable("TeacherLessonTargets");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.TeacherStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TeacherStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Студент"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Аспирант"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Частный преподаватель"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Школьный преподаватель"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Профессор"
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.TeacherUseFulUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TeacherUseFulUrls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorText = "#000000",
                            Image = "https://img.freepik.com/free-photo/representations-user-experience-interface-design_23-2150104504.jpg?w=1380&t=st=1699363877~exp=1699364477~hmac=1af63fd6e634f7117b35f5828ab2438586596ff114107c04372bb7933069f072",
                            Text = "Как пользоваться сервисом?",
                            Url = "https://teletype.in/@repetitme/about_us"
                        },
                        new
                        {
                            Id = 2,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/3d-render-bullseye-target-sandglass-coins_107791-16200.jpg?w=1060&t=st=1699363889~exp=1699364489~hmac=f3fb45411408c5c52ae24de4ac5c71cbaa9b5c0300a7d274eb52ad3c557505df",
                            Text = "Преимущества сервиса для репетиторов",
                            Url = "https://teletype.in/@repetitme/adv_for_tutors"
                        },
                        new
                        {
                            Id = 3,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/mobile-phone-with-check-list-screen_107791-17459.jpg?w=826&t=st=1699363905~exp=1699364505~hmac=b63d3159070c03c0782365fce92d943e06467d15a5540fe32f3a00c9b03c085f",
                            Text = "Анкета репетитора",
                            Url = "https://teletype.in/@repetitme/from_for_tutors"
                        },
                        new
                        {
                            Id = 4,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/golden-russian-ruble-coins-currency-money-sign-symbol-background-3d-illustration_56104-1707.jpg?w=740&t=st=1699363923~exp=1699364523~hmac=71e34623397ca15b7bc078617e449936286fda33eba6809317e99b58159875ed",
                            Text = "Как формируется комиссия за заявки?",
                            Url = "https://teletype.in/@repetitme/about_fee"
                        },
                        new
                        {
                            Id = 5,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/five-golden-stars-client-excellent-evaluation-after-use-product-service-concept-by-3d-render_616485-15.jpg?w=1380&t=st=1699363939~exp=1699364539~hmac=c3a33800b559a6ad51484a74095b2863a0c0b459dfc9a3384c2ab4410016c8c6",
                            Text = "Как формируется рейтинг?",
                            Url = "https://teletype.in/@repetitme/rating_of_tutor"
                        },
                        new
                        {
                            Id = 6,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/3d-rendering-social-media-icon_23-2150701008.jpg?w=1060&t=st=1699363955~exp=1699364555~hmac=3c1c1242d415454fc889dd2154994aa05bbfdb971d8b1de943be29e7967d3f9c",
                            Text = "Уведомления для репетитора",
                            Url = "https://teletype.in/@repetitme/feedback_tutors"
                        },
                        new
                        {
                            Id = 7,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/3d-render-customer-leave-feedback-phone-screen_107791-17460.jpg?w=826&t=st=1699363994~exp=1699364594~hmac=835f40a2ce752e0d61c0d54582e463a8705394efae80722e2310a6a6b45b4746",
                            Text = "Как оставить отзыв о репетиторе",
                            Url = "https://teletype.in/@repetitme/review"
                        },
                        new
                        {
                            Id = 8,
                            ColorText = "#FFFFFF",
                            Image = "https://img.freepik.com/free-photo/3d-render-online-education-survey-test-concept_107791-15665.jpg?w=1800&t=st=1699364012~exp=1699364612~hmac=ff52de907dd32cb7cc25828f5807cc65909670cdc661c8385175737605f1470f",
                            Text = "Как проводить онлайн - занятия ?",
                            Url = "https://teletype.in/@repetitme/online_lessons"
                        },
                        new
                        {
                            Id = 9,
                            ColorText = "#000000",
                            Image = "https://img.freepik.com/free-psd/question-mark-speech-bubble-icon-isolated-3d-render-illustration_47987-11661.jpg?w=1060&t=st=1699364032~exp=1699364632~hmac=b9780246b63790d28062a5a78a4a454a15ba74ee89136a9edd3f33f6d54560db",
                            Text = "FAQ - вопросырепетиторов",
                            Url = "https://teletype.in/@repetitme/faq_tutors"
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Users.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Users.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<List<string>>("Certificates")
                        .HasColumnType("text[]");

                    b.Property<int?>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<double>("PaymentRating")
                        .HasColumnType("double precision");

                    b.Property<int?>("Price")
                        .HasColumnType("integer");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<int?>("ScienceId")
                        .HasColumnType("integer");

                    b.Property<int?>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("VideoPresentation")
                        .HasColumnType("text");

                    b.Property<bool>("Visibility")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ScienceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<bool>("Block")
                        .HasColumnType("boolean");

                    b.Property<int>("LastActivity")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelegramName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.Dispute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcceptFromStudent")
                        .HasColumnType("boolean");

                    b.Property<bool?>("AcceptFromTeacher")
                        .HasColumnType("boolean");

                    b.Property<string>("DataFromStudent")
                        .HasColumnType("text");

                    b.Property<string>("DataFromTeacher")
                        .HasColumnType("text");

                    b.Property<double?>("PriceStudent")
                        .HasColumnType("double precision");

                    b.Property<double?>("PriceTeacher")
                        .HasColumnType("double precision");

                    b.Property<bool>("StatusClose")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Disputes");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Commission")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("DateTimeAccept")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeFirstLesson")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("RefusedStudent")
                        .HasColumnType("boolean");

                    b.Property<bool>("RefusedTeacher")
                        .HasColumnType("boolean");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.ScienceLessonTarget", b =>
                {
                    b.Property<int>("ScienceId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonTargetId")
                        .HasColumnType("integer");

                    b.HasKey("ScienceId", "LessonTargetId");

                    b.HasIndex("LessonTargetId");

                    b.ToTable("ScienceLessonTargets");

                    b.HasData(
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 1
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 2
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 3
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 4
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 5
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 6
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 1,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 10
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 11
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 12
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 13
                        },
                        new
                        {
                            ScienceId = 2,
                            LessonTargetId = 14
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 15
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 16
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 17
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 18
                        },
                        new
                        {
                            ScienceId = 3,
                            LessonTargetId = 19
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 20
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 21
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 22
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 23
                        },
                        new
                        {
                            ScienceId = 4,
                            LessonTargetId = 24
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 25
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 26
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 27
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 28
                        },
                        new
                        {
                            ScienceId = 5,
                            LessonTargetId = 29
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 30
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 31
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 32
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 33
                        },
                        new
                        {
                            ScienceId = 6,
                            LessonTargetId = 34
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 35
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 36
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 37
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 38
                        },
                        new
                        {
                            ScienceId = 7,
                            LessonTargetId = 39
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 40
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 41
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 42
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 43
                        },
                        new
                        {
                            ScienceId = 8,
                            LessonTargetId = 44
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 7
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 8
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 9
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 45
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 46
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 47
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 48
                        },
                        new
                        {
                            ScienceId = 9,
                            LessonTargetId = 49
                        });
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.SurveyFirst", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RepitSurveyTeacher")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("StudentAccept")
                        .HasColumnType("boolean");

                    b.Property<bool>("StudentAnswer")
                        .HasColumnType("boolean");

                    b.Property<double?>("StudentPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("StudentWhy")
                        .HasColumnType("text");

                    b.Property<bool?>("TeacherAccept")
                        .HasColumnType("boolean");

                    b.Property<bool>("TeacherAnswer")
                        .HasColumnType("boolean");

                    b.Property<string>("TeacherCause")
                        .HasColumnType("text");

                    b.Property<double?>("TeacherPrice")
                        .HasColumnType("double precision");

                    b.Property<string>("TeacherSpecify")
                        .HasColumnType("text");

                    b.Property<string>("TeacherWhy")
                        .HasColumnType("text");

                    b.Property<long>("TelegramIdStudent")
                        .HasColumnType("bigint");

                    b.Property<long>("TelegramIdTeacher")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SurveisFirst");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.SurveySecond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RepitSurveyStudent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RepitSurveyTeacher")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("StudentAccept")
                        .HasColumnType("boolean");

                    b.Property<bool>("StudentAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("StudentCancel")
                        .HasColumnType("boolean");

                    b.Property<bool?>("StudentWannaNext")
                        .HasColumnType("boolean");

                    b.Property<string>("StudentWhy")
                        .HasColumnType("text");

                    b.Property<bool?>("TeacherAccept")
                        .HasColumnType("boolean");

                    b.Property<bool>("TeacherAnswer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("TeacherCancel")
                        .HasColumnType("boolean");

                    b.Property<string>("TeacherCause")
                        .HasColumnType("text");

                    b.Property<string>("TeacherSpecify")
                        .HasColumnType("text");

                    b.Property<bool?>("TeacherWannaNext")
                        .HasColumnType("boolean");

                    b.Property<string>("TeacherWhy")
                        .HasColumnType("text");

                    b.Property<long>("TelegramIdStudent")
                        .HasColumnType("bigint");

                    b.Property<long>("TelegramIdTeacher")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("SurveisSecond");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.TeacherAgeCategory", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Data.AgeCategory", "AgeCategory")
                        .WithMany()
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepititMe.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeacherAgeCategories")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeCategory");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.TeacherLessonTarget", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Data.LessonTarget", "LessonTarget")
                        .WithMany()
                        .HasForeignKey("LessonTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepititMe.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany("TeacherLessonTargets")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonTarget");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Review", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Users.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepititMe.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Users.Student", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Users.Teacher", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Data.Science", "Science")
                        .WithMany()
                        .HasForeignKey("ScienceId");

                    b.HasOne("RepititMe.Domain.Entities.Data.TeacherStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("RepititMe.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Science");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.Dispute", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Users.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepititMe.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.Order", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Users.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepititMe.Domain.Entities.Users.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.Report", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Weights.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.ScienceLessonTarget", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Data.LessonTarget", "LessonTarget")
                        .WithMany("ScienceLessonTargets")
                        .HasForeignKey("LessonTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepititMe.Domain.Entities.Data.Science", "Science")
                        .WithMany("ScienceLessonTargets")
                        .HasForeignKey("ScienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonTarget");

                    b.Navigation("Science");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.SurveyFirst", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Weights.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Weights.SurveySecond", b =>
                {
                    b.HasOne("RepititMe.Domain.Entities.Weights.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.LessonTarget", b =>
                {
                    b.Navigation("ScienceLessonTargets");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Data.Science", b =>
                {
                    b.Navigation("ScienceLessonTargets");
                });

            modelBuilder.Entity("RepititMe.Domain.Entities.Users.Teacher", b =>
                {
                    b.Navigation("TeacherAgeCategories");

                    b.Navigation("TeacherLessonTargets");
                });
#pragma warning restore 612, 618
        }
    }
}
